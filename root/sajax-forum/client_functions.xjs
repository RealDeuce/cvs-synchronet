<?xjs 
	http_reply.header['Content-Type']='text/javascript'
	load(cwd+'functions.js');
?>

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

function encode64(input) {
   var output = "";
   var chr1, chr2, chr3;
   var enc1, enc2, enc3, enc4;
   var i = 0;

   do {
      chr1 = input.charCodeAt(i++);
      chr2 = input.charCodeAt(i++);
      chr3 = input.charCodeAt(i++);

      enc1 = chr1 >> 2;
      enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
      enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
      enc4 = chr3 & 63;

      if (isNaN(chr2)) {
         enc3 = enc4 = 64;
      } else if (isNaN(chr3)) {
         enc4 = 64;
      }

      output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) + 
         keyStr.charAt(enc3) + keyStr.charAt(enc4);
   } while (i < input.length);
   
   return output;
}

// Script from http://www.dynamicdrive.com/dynamicindex17/ajaxcontent.htm

/***********************************************
* Dynamic Ajax Content- © Dynamic Drive DHTML code library (www.dynamicdrive.com)
* This notice MUST stay intact for legal use
* Visit Dynamic Drive at http://www.dynamicdrive.com/ for full source code
***********************************************/

var body_url="<?xjs write(http_request.virtual_path.replace(/client_functions\.xjs$/,'body.xjs')) ?>";
var subs_url="<?xjs write(http_request.virtual_path.replace(/client_functions\.xjs$/,'subs.xjs')) ?>";
var messages_url="<?xjs write(http_request.virtual_path.replace(/client_functions\.xjs$/,'messages.xjs')) ?>";
var groups_url="<?xjs write(http_request.virtual_path.replace(/client_functions\.xjs$/,'groups.xjs')) ?>";
var plus_url="<?xjs write(http_request.virtual_path.replace(/client_functions\.xjs$/,'plus.gif')) ?>";
var minus_url="<?xjs write(http_request.virtual_path.replace(/client_functions\.xjs$/,'minus.gif')) ?>";
var login_url="<?xjs write(http_request.virtual_path.replace(/client_functions\.xjs$/,'login.xjs')) ?>";
var update_ptr_url="<?xjs write(http_request.virtual_path.replace(/client_functions\.xjs$/,'update_ptr.xjs')) ?>";
var user=<?xjs if(user.alias != '') write(user.alias.toSource()); else write(user.name.toSource()) ?>;
var password=<?xjs write(user.security.password.toSource()) ?>;
var read_ptr=new Object();

function clean_id(id)
{
	return(id.replace(/[^A-Za-z0-9]/g,'_'));
}

function toggle_replies(sub_code, message_number)
{
	var containerid='replies-'+clean_id(sub_code)+'-'+message_number;
	var expanderid='reply-expander-'+clean_id(sub_code)+'-'+message_number;

	if(document.getElementById(containerid).innerHTML=='')
		ajaxpage(messages_url+"?sub_code="+sub_code+"&msg_number="+message_number+'&user='+user,containerid,expanderid,minus_url);
	else {
		document.getElementById(containerid).innerHTML='';
		document.getElementById(expanderid).src=plus_url;
	}
}

function toggle_body(sub_code, message_number)
{
	var containerid='message-body-'+clean_id(sub_code)+'-'+message_number;
	var container=document.getElementById(containerid);
	var message=container.parentNode.parentNode;

	if(container.innerHTML=='') {
		ajaxpage(body_url+"?sub_code="+sub_code+"&msg_number="+message_number+'&user='+user,containerid);
		/* If this is higher than the current read_ptr, update it */
		if(read_ptr[sub_code] < message_number)
			read_ptr[sub_code] = message_number;
		/* If this item was new, "un-new" it */
		if(message.className=='message_is_new') {
			/* No longer new... update it and it's parents... */
			message.className='message';
			/* Now for the parents.. */
			parentLoop: while(1) {
				message=message.parentNode.parentNode.parentNode;
				if(message==undefined || message==null)
					break;
				switch(message.className) {
				case 'message_inherit_new':
					message.className='message';
					break;
				case 'message_is_new_inherit_new':
					message.className='message_is_new';
					break parentLoop;
				default:
					break;
				}
			}
		}
		else if(message.className=='message_is_new_inherit_new') {
			/* No longer new update it... */
			message.className='message_inherit_new';
		}
	}
	else
		container.innerHTML='';
}

function toggle_messages(sub_code)
{
	var containerid='message-list-'+clean_id(sub_code);
	if(document.getElementById(containerid).innerHTML=='') {
		ajaxpage(messages_url+"?sub_code="+sub_code+'&user='+user,containerid);
		if(read_ptr[sub_code]==undefined)
			read_ptr[sub_code]=0;
	}
	else
		document.getElementById(containerid).innerHTML='';
}

function toggle_subs(group_code)
{
	var containerid='group-subs-'+clean_id(group_code);
	if(document.getElementById(containerid).innerHTML=='')
		ajaxpage(subs_url+"?group_code="+group_code+'&user='+user,containerid);
	else
		document.getElementById(containerid).innerHTML='';
}

function reload_groups()
{
	var containerid='group-list';
	ajaxpage(groups_url+'?user='+user,containerid);
}

function ajaxpage(url, containerid, buttonid, buttonurl, is_script)
{
	var page_request = false;
	if (window.XMLHttpRequest) // if Mozilla, Safari etc
		page_request = new XMLHttpRequest();
	else if (window.ActiveXObject){ // if IE
		try {
			page_request = new ActiveXObject("Msxml2.XMLHTTP");
		} 
		catch (e){
			try{
				page_request = new ActiveXObject("Microsoft.XMLHTTP");
			}
			catch (e){}
		}
	}
	else
		return false;
	if(containerid != undefined) {
		if(is_script) {
			page_request.onreadystatechange=function() {
				evalpage(page_request, containerid);
			}
		}
		else {
			page_request.onreadystatechange=function(){
				loadpage(page_request, containerid, buttonid, buttonurl);
			}
		}
	}
	document.body.style.cursor="progress";
	document.getElementById(containerid).innerHTML=spin('');
	page_request.open('GET', url, true);
	page_request.setRequestHeader('Authorization',"Basic "+encode64(user+":"+password));
	page_request.send(null);
}

function spin(current)
{
	switch(current) {
		case '<span style="font-family: monospace;">Loading -</span>':
			return('<span style="font-family: monospace;">Loading \\</span>');
		case '<span style="font-family: monospace;">Loading /</span>':
			return('<span style="font-family: monospace;">Loading -</span>');
		case '<span style="font-family: monospace;">Loading |</span>':
			return('<span style="font-family: monospace;">Loading /</span>');
		default:
			return('<span style="font-family: monospace;">Loading |</span>');
	}
}

function evalpage(page_request, containerid)
{
	if(page_request.readyState==4) {
		document.body.style.cursor="auto";
		if ((page_request.status==200 || window.location.href.indexOf("http")==-1)) {
			document.getElementById(containerid).innerHTML=eval(page_request.responseText);
		}
		else
			document.getElementById(containerid).innerHTML='ERROR!';
	}
	else {
		document.getElementById(containerid).innerHTML=spin(document.getElementById(containerid).innerHTML);
	}
}

function loadpage(page_request, containerid, buttonid, buttonurl)
{
	if(page_request.readyState==4) {
		document.body.style.cursor="auto";
		if ((page_request.status==200 || window.location.href.indexOf("http")==-1)) {
			document.getElementById(containerid).innerHTML=page_request.responseText;
			if(buttonid != undefined && buttonurl != undefined)
				document.getElementById(buttonid).src=buttonurl;
		}
		else
			document.getElementById(containerid).innerHTML='';
	}
	else {
		document.getElementById(containerid).innerHTML=spin(document.getElementById(containerid).innerHTML);
	}
}

function login()
{
	var new_user=document.getElementById('login_username').value;
	var new_password=document.getElementById('login_password').value;
	/* Clear newest read pointers */
	read_ptr=new Object();
	ajaxpage(login_url+'?user='+new_user+'&pass='+new_password+'&killcache='+new Date().getTime()+Math.random(), 'current_user',undefined,undefined,true);
}

function update_pointers()
{
	var args=new Array();

	for(sub_code in read_ptr)
		args.push(encodeURIComponent(sub_code)+'='+read_ptr[sub_code]);

	ajaxpage(update_ptr_url+"?"+args.join('&'));
}
