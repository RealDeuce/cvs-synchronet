project(GTKUserEdit C)

cmake_minimum_required(VERSION 2.8.11)

find_package(GTK2 2.6 COMPONENTS gtk glade)

macro(double_require_lib_dir TARGET LIB LIBDIR)
	if("${CMAKE_SOURCE_DIR}" STREQUAL "${CMAKE_CURRENT_LIST_DIR}")
		if(NOT DEFINED ${LIBDIR}_DONE)
			add_subdirectory(../../${LIBDIR} ${LIB} EXCLUDE_FROM_ALL)
			set(${LIBDIR}_DONE TRUE)
		endif()
	endif()
	add_dependencies(${TARGET} ${LIB})
	target_include_directories(${TARGET} PRIVATE ../../${LIBDIR})
	target_compile_definitions(${TARGET} PRIVATE $<TARGET_PROPERTY:${LIB},INTERFACE_COMPILE_DEFINITIONS>)
	target_link_libraries(${TARGET} ${LIB})
endmacro()

macro(double_require_lib TARGET LIB)
	double_require_lib_dir(${TARGET} ${LIB} ${LIB})
endmacro()

if("${CMAKE_SOURCE_DIR}" STREQUAL "${CMAKE_CURRENT_LIST_DIR}")
	add_subdirectory(../../conio conio EXCLUDE_FROM_ALL)
	add_subdirectory(../../uifc uifc EXCLUDE_FROM_ALL)
endif()

if(NOT WIN32)
	find_program(GNU_MAKE
		NAMES gmake make
	)
	if(NOT ${GNU_MAKE} STREQUAL "GNU_MAKE-NOTFOUND")
		if("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
			set(BUILD_TYPE_FLAG DEBUG=1)
		else()
			set(BUILD_TYPE_FLAG RELEASE=1)
		endif()
		execute_process(
			COMMAND ${GNU_MAKE} -C ${CMAKE_CURRENT_SOURCE_DIR}/../../build --no-print-directory DONT_CLOBBER_CC=please ${BUILD_TYPE_FLAG}
			OUTPUT_FILE ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/paths.txt
			ERROR_FILE ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/paths.err
		)
		file(STRINGS ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/paths.txt PATHS)
		list(GET PATHS 0 LEGACY_LIBDIR)
		list(GET PATHS 1 LEGACY_OBJDIR)
		list(GET PATHS 2 LEGACY_MTOBJBDIR)
		list(GET PATHS 3 LEGACY_EXEDIR)
		list(GET PATHS 4 LEGACY_3RDPDIR)
	else()
		message(SEND_ERROR "Unable to lcoate GNU make")
	endif()
endif()

if(WIN32)
	link_directories(../../../3rdp/win32.release/mozjs/bin)
	link_directories(../../../3rdp/win32.release/nspr/bin)
	link_directories(../../../3rdp/win32.release/cryptlib/bin)
else()
	link_directories(../../../3rdp/${LEGACY_3RDPDIR}/mozjs/lib)
	link_directories(../../../3rdp/${LEGACY_3RDPDIR}/cl)
endif()

if(GTK2_FOUND)
	add_executable(gtkuseredit
		gtkuseredit.c
		events.c
	)
	double_require_lib_dir(gtkuseredit sbbs sbbs3)
	target_include_directories(gtkuseredit PRIVATE ..)
	target_include_directories(gtkuseredit PRIVATE ../../../3rdp/${LEGACY_3RDPDIR}/mozjs/include/js)
	double_require_lib(gtkuseredit xpdev)
	double_require_lib(gtkuseredit smblib)
	target_include_directories(gtkuseredit PRIVATE ../../comio)
	target_link_libraries(gtkuseredit ${GTK2_LIBRARIES})
	target_include_directories(gtkuseredit PRIVATE ${GTK2_INCLUDE_DIRS})
	target_compile_definitions(gtkuseredit PRIVATE ${GTK2_DEFINITIONS})
endif(GTK2_FOUND)

if(NOT WIN32)
	execute_process(COMMAND nspr-config --cflags OUTPUT_VARIABLE NSPR_CFLAGS OUTPUT_STRIP_TRAILING_WHITESPACE)
	execute_process(COMMAND nspr-config --includedir OUTPUT_VARIABLE NSPR_INCLUDE_DIR OUTPUT_STRIP_TRAILING_WHITESPACE)
	execute_process(COMMAND nspr-config --libs OUTPUT_VARIABLE NSPR_LIBS OUTPUT_STRIP_TRAILING_WHITESPACE)
	target_compile_options(gtkuseredit PRIVATE ${NSPR_CFLAGS})
	target_include_directories(gtkuseredit PRIVATE ${NSPR_INCLUDE_DIR})
	set_property(TARGET gtkuseredit APPEND PROPERTY LINK_FLAGS "${NSPR_LIBS}")
	target_link_libraries(gtkuseredit -Wl,-E)
endif()

# For forkpty...
if(CMAKE_SYSTEM_NAME STREQUAL "NetBSD")
        target_link_libraries(gtkuseredit util)
elseif(CMAKE_SYSTEM_NAME STREQUAL "OpenBSD")
        target_link_libraries(gtkuseredit util)
elseif(CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")
        target_link_libraries(gtkuseredit util)
elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
        target_link_libraries(gtkuseredit util)
endif()
list(APPEND CMAKE_REQUIRED_LIBRARIES util)
CHECK_FUNCTION_EXISTS(forkpty HAS_FORKPTY)
if(HAS_FORKPTY)
else()
	target_compile_definitions(gtkuseredit PRIVATE NEEDS_FORKPTY)
endif()
